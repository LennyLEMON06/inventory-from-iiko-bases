import requests
import hashlib
import urllib3
from xml.etree import ElementTree as ET
from datetime import datetime
import uuid
import pandas as pd
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from tkcalendar import DateEntry


# === –°–ü–ò–°–û–ö –ë–ê–ó –î–ê–ù–ù–´–• IIKO ===
IIKO_BASES = {
    
}

# === –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ===
LOGIN = ""
PASSWORD = ""


# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class IikoRevenueReporter:
    def __init__(self, login, password):
        self.login = login
        self.password = password
        self.session = requests.Session()
        self.session.verify = False
        self.token = None

    def auth(self, base_url):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"""
        auth_url = f"{base_url}/auth"
        try:
            password_hash = hashlib.sha1(self.password.encode()).hexdigest()
            response = self.session.post(
                auth_url,
                data={'login': self.login, 'pass': password_hash},
                headers={'Content-Type': 'application/x-www-form-urlencoded'}
            )
            if response.status_code == 200:
                self.token = response.text.strip()
                return True, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
            return False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}"
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"

    def get_stores(self, base_url):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫–ª–∞–¥–æ–≤"""
        if not self.token:
            return None, "–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å."

        url = f"{base_url}/v2/entities/list"
        params = {"rootType": "Account", "includeDeleted": "false"}

        try:
            response = self.session.get(url, params=params, headers={'Authorization': self.token})
            if response.status_code == 200:
                accounts = response.json()
                stores = [
                    acc for acc in accounts
                    if isinstance(acc, dict) and acc.get("type") == "INVENTORY_ASSETS"
                ]
                return stores, ""
            else:
                return None, f"–û—à–∏–±–∫–∞ API: {response.status_code}\n{response.text}"
        except Exception as e:
            return None, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"

    def find_product_by_name(self, base_url, search_name):
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∏–º–µ–Ω–∏"""
        if not self.token:
            return None, "–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å."

        url = f"{base_url}/v2/entities/products/list"
        try:
            response = self.session.post(
                url,
                data={"includeDeleted": "false"},
                headers={'Authorization': self.token}
            )
            if response.status_code != 200:
                return None, f"–û—à–∏–±–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã: {response.status_code}"

            products = response.json()
            search_lower = search_name.lower()

            for p in products:
                name = p.get("name", "")
                if search_lower in name.lower():
                    if p.get("stockControl", True):  # —Ç–æ–ª—å–∫–æ —Å —É—á—ë—Ç–æ–º
                        return {"id": p["id"].strip().lower(), "name": name}, ""

            return None, f"–¢–æ–≤–∞—Ä '{search_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤–µ–¥—ë—Ç —É—á—ë—Ç."
        except Exception as e:
            return None, f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}"

    def upload_inventory(self, base_url, inventory_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        if not self.token:
            return None, "–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å."

        url = f"{base_url}/documents/import/incomingInventory"
        root = ET.Element("document")

        for key in ["documentNumber", "dateIncoming", "status", "storeId", "comment"]:
            if key in inventory_data:
                ET.SubElement(root, key).text = str(inventory_data[key])

        use_time = ET.SubElement(root, "useDefaultDocumentTime")
        use_time.text = str(bool(inventory_data.get("useDefaultDocumentTime", False))).lower()

        items_el = ET.SubElement(root, "items")
        for item in inventory_data.get("items", []):
            item_el = ET.SubElement(items_el, "item")
            for field in ["status", "productId", "amountContainer", "comment"]:
                if field in item and item[field] is not None:
                    ET.SubElement(item_el, field).text = str(item[field])

        xml_str = ET.tostring(root, encoding='utf-8', method='xml').decode('utf-8')
        full_xml = '<?xml version="1.0" encoding="UTF-8"?>\n' + xml_str

        try:
            response = self.session.post(
                url,
                data=full_xml,
                headers={
                    'Content-Type': 'application/xml',
                    'Authorization': self.token
                }
            )
            if response.status_code == 200:
                result_xml = ET.fromstring(response.content)
                return result_xml, "–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
            else:
                error_text = response.text.strip() or f"HTTP {response.status_code}"
                return None, f"–û—à–∏–±–∫–∞: {error_text}"
        except Exception as e:
            return None, f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}"


class InventoryApp:
    def __init__(self, root):
        self.root = root
        self.root.title("iiko –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –∏–∑ Excel")
        self.root.geometry("640x740")
        self.file_path = tk.StringVar()
        self.selected_base = tk.StringVar()
        self.reporter = None
        self.stores = []
        self.setup_ui()

    def setup_ui(self):
        frame = ttk.Frame(self.root, padding="15")
        frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # === –ó–∞–≥–æ–ª–æ–≤–æ–∫ ===
        title_label = ttk.Label(frame, text="üì§ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –≤ iiko", font=("Arial", 14, "bold"))
        title_label.grid(row=0, column=0, columnspan=5, pady=(0, 20), sticky=tk.W)

        # === –ë–ª–æ–∫ 1: –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è + –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
        ttk.Label(frame, text="üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:", font=("Arial", 10)).grid(row=1, column=0, sticky=tk.W, pady=5)
        self.base_combo = ttk.Combobox(
            frame,
            values=list(IIKO_BASES.keys()),
            textvariable=self.selected_base,
            state="readonly",
            width=38
        )
        self.base_combo.grid(row=1, column=1, columnspan=2, pady=5, sticky=tk.W)
        self.base_combo.set("–°—Ç–∞—Ä–∏–∫ –•–∏–Ω–∫–∞–ª—ã—á –ö—É—Ä—Å–∫")

        # –õ–æ–≥–∏–Ω
        ttk.Label(frame, text="üë§ –õ–æ–≥–∏–Ω:").grid(row=2, column=0, sticky=tk.W, pady=5)
        self.login_entry = ttk.Entry(frame, width=30)
        self.login_entry.insert(0, LOGIN)
        self.login_entry.grid(row=2, column=1, pady=5, sticky=tk.W)

        # –ü–∞—Ä–æ–ª—å
        ttk.Label(frame, text="üîë –ü–∞—Ä–æ–ª—å:").grid(row=3, column=0, sticky=tk.W, pady=5)
        self.password_entry = ttk.Entry(frame, width=30, show="*")
        self.password_entry.insert(0, PASSWORD)
        self.password_entry.grid(row=3, column=1, pady=5, sticky=tk.W)

        # –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Å—Ç–∞—Ç—É—Å
        ttk.Button(frame, text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", command=self.authorize).grid(row=2, column=2, rowspan=2, padx=10)
        self.auth_status = ttk.Label(frame, text="‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", foreground="red")
        self.auth_status.grid(row=2, column=3, rowspan=2, padx=(10, 0), sticky=tk.W)

        # === –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ===
        ttk.Separator(frame, orient=tk.HORIZONTAL).grid(row=4, column=0, columnspan=5, sticky='ew', pady=15)

        # === –ë–ª–æ–∫ 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ===
        ttk.Label(frame, text="üìÇ Excel-—Ñ–∞–π–ª:", font=("Arial", 10)).grid(row=5, column=0, sticky=tk.W, pady=5)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø—É—Ç–∏ + –∫–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å" —Ä—è–¥–æ–º
        file_frame = ttk.Frame(frame)
        file_frame.grid(row=6, column=0, columnspan=4, sticky=tk.W, pady=3)

        ttk.Entry(file_frame, textvariable=self.file_path, width=50).pack(side=tk.LEFT)
        ttk.Button(file_frame, text="–í—ã–±—Ä–∞—Ç—å", command=self.browse_file).pack(side=tk.LEFT, padx=(5, 0))

        # === –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ===
        ttk.Separator(frame, orient=tk.HORIZONTAL).grid(row=7, column=0, columnspan=5, sticky='ew', pady=15)

        # === –ë–ª–æ–∫ 3: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞ ===
        ttk.Label(frame, text="üì¶ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏", font=("Arial", 12, "bold")).grid(
            row=8, column=0, columnspan=5, pady=(0, 15), sticky=tk.W)

        # --- –°–∫–ª–∞–¥ ---
        ttk.Label(frame, text="–°–∫–ª–∞–¥:").grid(row=9, column=0, sticky=tk.W, pady=6)
        self.store_combo = ttk.Combobox(frame, state="disabled", width=40)
        self.store_combo.grid(row=9, column=1, columnspan=3, pady=6, sticky=tk.W)

        # --- –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è ---
        ttk.Label(frame, text="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:").grid(row=10, column=0, sticky=tk.W, pady=6)

        datetime_frame = ttk.Frame(frame)
        datetime_frame.grid(row=10, column=1, columnspan=3, pady=6, sticky=tk.W)

        self.date_entry = DateEntry(
            datetime_frame,
            width=12,
            background='darkblue',
            foreground='white',
            date_pattern='yyyy-mm-dd'
        )
        self.date_entry.set_date(datetime.now())
        self.date_entry.pack(side=tk.LEFT)

        ttk.Label(datetime_frame, text="   ").pack(side=tk.LEFT)  # –æ—Ç—Å—Ç—É–ø

        self.time_spin_h = ttk.Spinbox(datetime_frame, from_=0, to=23, width=3, format="%02.0f")
        self.time_spin_h.set(datetime.now().hour)
        self.time_spin_h.pack(side=tk.LEFT)

        ttk.Label(datetime_frame, text=":", font=("Arial", 10)).pack(side=tk.LEFT)

        self.time_spin_m = ttk.Spinbox(datetime_frame, from_=0, to=59, width=3, format="%02.0f")
        self.time_spin_m.set((datetime.now().minute // 5) * 5)
        self.time_spin_m.pack(side=tk.LEFT)

        ttk.Label(datetime_frame, text=" (–ß–ß:–ú–ú)", foreground="gray", font=("Arial", 9)).pack(side=tk.LEFT, padx=(5, 0))

        # --- –°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ ---
        ttk.Label(frame, text="–°—Ç–∞—Ç—É—Å:").grid(row=11, column=0, sticky=tk.W, pady=10)
        self.status_var = tk.StringVar(value="NEW")
        ttk.Radiobutton(frame, text="–ß–µ—Ä–Ω–æ–≤–∏–∫", variable=self.status_var, value="NEW").grid(row=11, column=1, sticky=tk.W)
        ttk.Radiobutton(frame, text="–ü—Ä–æ–≤–µ–¥—ë–Ω", variable=self.status_var, value="PROCESSED").grid(row=11, column=2, sticky=tk.W)

        # === –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ===
        ttk.Button(frame, text="üöÄ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é", command=self.upload_from_excel).grid(
            row=12, column=0, columnspan=5, pady=20)

        # === –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π ===
        ttk.Label(frame, text="–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π:", font=("Arial", 10)).grid(row=13, column=0, sticky=tk.W, pady=(0, 5))

        # –ü–æ–ª–µ –ª–æ–≥–∞
        self.log_text = tk.Text(frame, height=12, width=85, font=("Courier", 9))
        self.log_text.grid(row=14, column=0, columnspan=4, pady=(0, 5), sticky='ew')
        scrollbar = ttk.Scrollbar(frame, orient=tk.VERTICAL, command=self.log_text.yview)
        scrollbar.grid(row=14, column=4, sticky='ns')
        self.log_text.config(yscrollcommand=scrollbar.set)

        # –ö–Ω–æ–ø–∫–∞ "–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥" ‚Äî –ø–æ–¥ –ª–æ–≥–æ–º, –ø–æ —Ü–µ–Ω—Ç—Ä—É
        ttk.Button(frame, text="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", command=self.clear_log).grid(
            row=15, column=0, columnspan=5, pady=(0, 10), sticky=tk.W+tk.E)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        frame.columnconfigure(0, weight=1)
        frame.columnconfigure(1, weight=1)
        frame.columnconfigure(2, weight=1)
        frame.columnconfigure(3, weight=1)
        frame.columnconfigure(4, weight=0)

    def log(self, message):
        self.log_text.insert(tk.END, f"[{datetime.now().strftime('%H:%M')}] {message}\n")
        self.log_text.see(tk.END)
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ (~1000 —Å—Ç—Ä–æ–∫)
        if int(self.log_text.index('end-1c').split('.')[0]) > 1000:
            self.log_text.delete(1.0, 2.0)

    def clear_log(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –ª–æ–≥–∞"""
        self.log_text.delete(1.0, tk.END)
        self.log("–õ–æ–≥ –æ—á–∏—â–µ–Ω")

    def browse_file(self):
        path = filedialog.askopenfilename(filetypes=[("Excel", "*.xlsx *.xls")])
        if path:
            self.file_path.set(path)
            self.log(f"–§–∞–π–ª –≤—ã–±—Ä–∞–Ω: {path}")

    def authorize(self):
        self.log_text.delete(1.0, tk.END)
        selected_name = self.selected_base.get()
        if not selected_name:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é!")
            return

        base_url = IIKO_BASES[selected_name]
        login = self.login_entry.get().strip()
        password = self.password_entry.get().strip()

        if not login or not password:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å!")
            return

        self.reporter = IikoRevenueReporter(login, password)
        success, msg = self.reporter.auth(base_url)
        self.log(msg)

        if success:
            self.auth_status.config(text="‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", foreground="green")
            self.load_stores(base_url)
        else:
            self.auth_status.config(text="‚ùå –û—à–∏–±–∫–∞", foreground="red")
            messagebox.showerror("–û—à–∏–±–∫–∞", msg)

    def load_stores(self, base_url):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∫–ª–∞–¥—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π: –∏—Å–∫–ª—é—á–∞–µ—Ç '–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º' –¥–ª—è –≤—Å–µ—Ö,
           –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –≥–æ—Ä–æ–¥–∞–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ö–∞–∑–∞–Ω–∏"""
        stores, err = self.reporter.get_stores(base_url)
        if err:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–ª–∞–¥–æ–≤: {err}")
            return

        if not stores:
            self.log("‚ö†Ô∏è –°–∫–ª–∞–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ ‚Äî —Å–∫–ª–∞–¥—ã —Å —Ç–∞–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è
        blacklist = [
            "–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º",
            "–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è",
            "—Ç–µ—Å—Ç–æ–≤—ã–π",
            "—Ç–µ—Å—Ç ",
            "–∞—Ä—Ö–∏–≤",
            "—Ä–µ–∑–µ—Ä–≤",
            "—á–µ—Ä–Ω–æ–≤–∏–∫",
            "–≤—Ä–µ–º–µ–Ω–Ω—ã–π",
            "backup"
        ]

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
        selected_base = self.selected_base.get()

        filtered_stores = []
        for store in stores:
            name = store["name"]
            name_lower = name.lower().strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ ‚Äî –≤—Å–µ–≥–¥–∞!
            is_blacklisted = any(bad in name_lower for bad in blacklist)
            if is_blacklisted:
                # self.log(f"üö´ –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º): {name}")
                continue

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¢–û–õ–¨–ö–û –¥–ª—è –ö–∞–∑–∞–Ω–∏
            if "–ö–∞–∑–∞–Ω—å" in selected_base:
                keywords = ["–∫–∞–∑–∞–Ω—å", "–∂–µ–ª–µ–∑–Ω–æ–≥–æ—Ä—Å–∫", "–±—Ä—è–Ω—Å–∫"]
                if not any(kw in name_lower for kw in keywords):
                    # self.log(f"üîç –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ –ø–æ –ª–æ–∫–∞—Ü–∏–∏): {name}")
                    continue

            # –ï—Å–ª–∏ –ø—Ä–æ—à—ë–ª –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
            filtered_stores.append(store)

        stores = filtered_stores

        if not stores:
            self.log("‚ö†Ô∏è –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∏ –æ–¥–∏–Ω —Å–∫–ª–∞–¥ –Ω–µ –ø–æ–¥–æ—à—ë–ª")
            self.store_combo.config(state="disabled", values=[])
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å
        self.stores = stores
        store_names = [s["name"] for s in stores]
        self.store_combo.config(state="readonly", values=store_names)
        self.log(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∫–ª–∞–¥–æ–≤: {len(stores)}")

    def upload_from_excel(self):
        if not self.reporter:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å!")
            return

        file_path = self.file_path.get()
        if not file_path:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª!")
            return

        if not self.store_combo.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥!")
            return

        try:
            excel_file = pd.ExcelFile(file_path)
            sheet_names = excel_file.sheet_names
            self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(sheet_names)} ‚Äî {', '.join(sheet_names)}")

            selected_store_name = self.store_combo.get()
            store = next((s for s in self.stores if s["name"] == selected_store_name), None)
            if not store:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            base_url = IIKO_BASES[self.selected_base.get()]

            date_obj = self.date_entry.get_date()
            hour = int(self.time_spin_h.get())
            minute = int(self.time_spin_m.get())
            dt = datetime.combine(date_obj, datetime.min.time().replace(hour=hour, minute=minute))
            date_incoming = dt.strftime("%Y-%m-%dT%H:%M:00")

            for sheet_name in sheet_names:
                self.log(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Å—Ç–∞: '{sheet_name}'")

                # –ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ (–∫–∞–∫ —Ç—ã —Å–¥–µ–ª–∞–ª)
                try:
                    df = pd.read_excel(file_path, sheet_name=sheet_name, header=0)
                except Exception as e:
                    self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–∏—Å—Ç '{sheet_name}': {e}")
                    continue

                # –ì–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ ‚Äî –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                name_keywords = ["–Ω–∞–∏–º–µ–Ω–æ–≤", "—Ç–æ–≤–∞—Ä", "–Ω–∞–∑–≤–∞–Ω–∏–µ", "–ø—Ä–æ–¥—É–∫—Ç", "–ø–æ–∑–∏—Ü–∏—è"]
                amount_keywords = ["–æ—Å—Ç–∞—Ç–æ–∫", "—Ñ–∞–∫—Ç", "–∫–æ–ª–∏—á–µ—Å—Ç–≤", "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π"]
                comment_keywords = ["–æ—Ç–º–µ—Ç–∫", "–∫–æ–º–º–µ–Ω—Ç", "–∑–∞–º–µ—Ç"]

                name_col = next((col for col in df.columns 
                                if any(kw in str(col).strip().lower() for kw in name_keywords)), None)
                amount_col = next((col for col in df.columns 
                                  if any(kw in str(col).strip().lower() for kw in amount_keywords)), None)
                comment_col = next((col for col in df.columns 
                                   if any(kw in str(col).strip().lower() for kw in comment_keywords)), None)

                if not name_col or not amount_col:
                    self.log(f"‚ùå –õ–∏—Å—Ç '{sheet_name}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫: "
                             f"–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ={name_col}, –æ—Å—Ç–∞—Ç–æ–∫={amount_col}")
                    continue

                self.log(f"‚úÖ –õ–∏—Å—Ç '{sheet_name}': –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: "
                         f"'{name_col}', '{amount_col}', {'-' if not comment_col else comment_col}")

                items = []
                errors = []

                for idx, row in df.iterrows():
                    product_name = str(row[name_col]).strip()
                    if not product_name or product_name.lower() == 'nan':
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚Äî –µ—Å–ª–∏ –ø—É—Å—Ç–æ, —Å—Ç–∞–≤–∏–º 0
                    amount_val = row[amount_col]
                    if pd.isna(amount_val) or str(amount_val).strip() == '':
                        amount = 0.0
                        self.log(f"‚ö†Ô∏è –õ–∏—Å—Ç '{sheet_name}', —Å—Ç—Ä–æ–∫–∞ {idx+2}: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç–æ–µ ‚Üí —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ 0")
                    else:
                        amount_str = str(amount_val).strip().replace(',', '.')
                        if not amount_str or not any(c.isdigit() for c in amount_str):
                            errors.append(f"–õ–∏—Å—Ç '{sheet_name}', —Å—Ç—Ä–æ–∫–∞ {idx+2}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '{amount_str}' ‚Üí —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ 0")
                            amount = 0.0
                        else:
                            try:
                                amount = float(amount_str)
                                if amount < 0:
                                    errors.append(f"–õ–∏—Å—Ç '{sheet_name}', —Å—Ç—Ä–æ–∫–∞ {idx+2}: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '{amount}' ‚Üí —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ 0")
                                    amount = 0.0
                            except (ValueError, TypeError):
                                errors.append(f"–õ–∏—Å—Ç '{sheet_name}', —Å—Ç—Ä–æ–∫–∞ {idx+2}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ '{amount_str}' ‚Üí —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ 0")
                                amount = 0.0

                    # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ ‚Äî –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    product, err = self.reporter.find_product_by_name(base_url, product_name)
                    if not product:
                        errors.append(f"–õ–∏—Å—Ç '{sheet_name}', —Å—Ç—Ä–æ–∫–∞ {idx+2}: {err} ‚Üí –ø–æ–∑–∏—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                        continue

                    comment = str(row.get(comment_col, "")).strip() or f"–õ–∏—Å—Ç: {sheet_name}"

                    items.append({
                        "status": "SAVE",
                        "productId": product["id"],
                        "amountContainer": amount,
                        "comment": comment[:255]
                    })

                if not items:
                    self.log(f"‚ö†Ô∏è –õ–∏—Å—Ç '{sheet_name}': –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
                    continue

                doc_number = f"INV-{uuid.uuid4().hex[:8].upper()}"
                inventory_data = {
                    "documentNumber": doc_number,
                    "dateIncoming": date_incoming,
                    "status": self.status_var.get(),
                    "storeId": store["id"],
                    "comment": f"–°–∫–ª–∞–¥: {selected_store_name} | –õ–∏—Å—Ç: {sheet_name}",
                    "useDefaultDocumentTime": False,
                    "items": items
                }

                self.log(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞: {doc_number}, –ª–∏—Å—Ç '{sheet_name}'")
                result_xml, msg = self.reporter.upload_inventory(base_url, inventory_data)
                self.log(msg)

                if result_xml is not None:
                    valid = result_xml.find("valid").text
                    doc_num = result_xml.find("documentNumber").text
                    self.log(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç: {doc_num}, –≤–∞–ª–∏–¥–µ–Ω: {valid}")
                    if valid == "true":
                        store_elem = result_xml.find("store/name")
                        if store_elem is not None:
                            self.log(f"üè≠ –ù–∞ —Å–∫–ª–∞–¥–µ: {store_elem.text}")
                        for item in result_xml.findall("items/item"):
                            name = item.find("product/name").text
                            actual = item.find("actualAmount").text
                            diff = item.find("differenceAmount").text
                            self.log(f"üì¶ {name}: —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ {actual}, —Ä–∞–∑–Ω–∏—Ü–∞ {diff}")
                    else:
                        error = result_xml.find("errorMessage")
                        if error is not None and error.text:
                            self.log(f"‚ùå –û—à–∏–±–∫–∞: {error.text}")
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—Å—Ç–∞ '{sheet_name}'")

                if errors:
                    for err in errors:
                        self.log(f"üî¥ {err}")

            self.log("\nüéâ –í—Å–µ –ª–∏—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")


if __name__ == "__main__":
    root = tk.Tk()
    app = InventoryApp(root)
    root.mainloop()